/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.fortunewheelview;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiUIView;
import android.app.Activity;
import java.util.HashMap;

// This proxy can be created by calling Wheel.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = WheelViewModule.class)
public class WheelViewProxy extends TiViewProxy {
	// Standard Debugging variables
	public static final String LCAT = "WheelView";
	public WheelView mView;
	public String[] icons;

	public HashMap<String, Object> attr = new HashMap<String, Object>();

	// Constructor
	public WheelViewProxy() {
		super();
	}

	@Override
	public TiUIView createView(Activity activity) {
		mView = new WheelView(this);
		mView.getLayoutParams().autoFillsHeight = true;
		mView.getLayoutParams().autoFillsWidth = true;
		mView.addWheel(icons,attr);
		return mView;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict args) {
		super.handleCreationDict(args);
		if (args.containsKey("icons")) {
			icons = args.getStringArray("icons");
		}
		if (args.containsKey("options")) {
			final HashMap<String, Object> options;
			options = args.getKrollDict("options");
			attr.put("spinSensitivity",
					options.getOrDefault("spinSensitivity", 1f));
			attr.put("frameRate", options.getOrDefault("frameRate", 40));
			attr.put("friction", options.getOrDefault("friction", 5));
			attr.put("velocityClamp", options.getOrDefault("velocityClamp", 15));
			attr.put("flingable", options.getOrDefault("flingable", true));
			attr.put("grooves", options.getOrDefault("grooves", true));
			attr.put("notch", options.getOrDefault("notch", 90));
			attr.put("unselectScaleOffset",
					options.getOrDefault("unselectScaleOffset", .8f));
			attr.put("selectScaleOffset",
					options.getOrDefault("selectScaleOffset", 1));
			attr.put("distanceScale", options.getOrDefault("distanceScale", 1));
			attr.put("centripetalPercent",
					options.getOrDefault("centripetalPercent", .25f));
			attr.put(" minimumSize", options.getOrDefault(" minimumSize", .1f));
		}
	}
}